

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Verify tag commit is on master
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          echo "Current ref: $GITHUB_REF"
          git fetch origin master --depth=1
          if git merge-base --is-ancestor $(git rev-parse HEAD) origin/master; then
            echo "Tag 指向的提交在 master 历史中，继续。"
          else
            echo "该 tag 指向的提交不属于 master，失败并触发清理。" >&2
            exit 1
          fi
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore dependencies
        run: dotnet restore ProtectEyes/ProtectEyes.csproj
      - name: Build
        run: dotnet build ProtectEyes/ProtectEyes.csproj --configuration Release --no-restore
      - name: Test
        id: tests
        shell: pwsh
        run: |
          dotnet test ProtectEyeTest/ProtectEyeTest.csproj --no-build --verbosity normal
      - name: Publish (Only for tag & tests passed)
        if: steps.tests.outcome == 'success' && startsWith(github.ref, 'refs/tags/v')
        run: |
          dotnet publish ProtectEyes/ProtectEyes.csproj -c Release -o published /p:PublishSingleFile=true /p:IncludeAllContentForSelfExtract=true /p:SelfContained=false
          echo "Published files:" 
          Get-ChildItem -Recurse -Force published | Select-Object FullName,Length,LastWriteTime
      - name: Upload published artifact
        if: steps.tests.outcome == 'success' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: published
          path: published/**

  release:
    needs: test
    runs-on: windows-latest
    # 仅当测试成功且当前 ref 是 v* tag 时才发布
    if: ${{ needs.test.result == 'success' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: published
          path: published
      - name: Create GitHub Release & Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            published/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup_tag:
    # 只要测试失败或发布失败（包括创建 release 失败）且是 v* tag 推送就删除 tag
    if: ${{ always() && startsWith(github.ref, 'refs/tags/v') && (needs.test.result == 'failure' || needs.release.result == 'failure') }}
    runs-on: ubuntu-latest
    needs: [test, release]
    steps:
      - name: Delete tag on GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          echo "Deleting tag $TAG_NAME from remote..."
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/git/refs/tags/$TAG_NAME"